{"version":3,"sources":["steganography.js","components/UploadButton.jsx","components/App.jsx","index.js"],"names":["isImageUpload","loadImage","e","reader","FileReader","onload","event","test","result","dataUrl","target","img","Image","ctx","document","getElementById","getContext","canvas","width","height","drawImage","src","alert","value","readAsDataURL","files","encode","message","length","style","display","output","imgData","getImageData","colors","messageBits","getBitsFromNumber","concat","i","code","charCodeAt","getMessageBits","history","pos","loc","getNextLocation","setBit","encodeMessage","data","putImageData","toDataURL","decode","messageSize","getNumberFromBits","push","String","fromCharCode","join","decodeMessage","getBit","number","location","bit","bits","bytes","total","indexOf","UploadButton","React","createElement","htmlFor","id","name","type","onChange","Button","margin","variant","component","App","_useState","useState","_useState2","_slicedToArray","option","setOption","handleClick","currentTarget","Fragment","className","onClick","multiline","placeholder","alt","ReactDOM","render"],"mappings":"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","file":"static/js/main.99424f8c.chunk.js","sourcesContent":["let isImageUpload = false;\r\n\r\n// Loads input image to the Canvas for encoding or decoding\r\nfunction loadImage(e) {\r\n  let reader = new FileReader();\r\n  reader.onload = (event) => {\r\n    let regex = /data:image/;\r\n    if (regex.test(reader.result)) {      //Checks if the uploaded file is an image \r\n      isImageUpload = true;\r\n      let dataUrl = event.target.result;\r\n      let img = new Image();\r\n      img.onload = () => {\r\n        let ctx = document.getElementById('canvas').getContext('2d');\r\n        ctx.canvas.width = img.width;\r\n        ctx.canvas.height = img.height;\r\n        ctx.drawImage(img, 0, 0);\r\n      }\r\n      img.src = dataUrl;\r\n      alert(\"Image Uploaded\");\r\n    } else {\r\n      document.getElementById('upload-photo').value = '';\r\n      alert(\"Please upload an image!\");\r\n    }\r\n  };\r\n  reader.readAsDataURL(e.target.files[0]);\r\n};\r\n\r\n// Encodes the secret message on the original and displays the encoded image\r\nfunction encode() {\r\n  if (isImageUpload) {      //Checks if an image is uploaded  \r\n    let message = document.getElementById('secret').value;\r\n    if (message.length > 1000) {\r\n      alert(\"The message is too big to encode\");\r\n    } else {\r\n      document.getElementById('encoded-image').style.display = 'block';\r\n      document.getElementById('secret').value = '';\r\n      let output = document.getElementById('encoded-image');\r\n      let canvas = document.getElementById('canvas');\r\n      let ctx = canvas.getContext('2d');\r\n      let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      encodeMessage(imgData.data, message);\r\n      ctx.putImageData(imgData, 0, 0);\r\n      alert('Image encoded!\\n Save below image for further use!');\r\n      output.src = canvas.toDataURL();\r\n    }\r\n  } else {\r\n    document.getElementById('upload-photo').value = '';\r\n    alert(\"Please upload an image!\");\r\n  }\r\n};\r\n\r\n// Decodes the secret message from the canvas and alerts it to the user\r\nfunction decode() {\r\n  let ctx = document.getElementById('canvas').getContext('2d');\r\n  let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  let message = decodeMessage(imgData.data);\r\n  alert(\"The message encode is:\\n\" + message);\r\n};\r\n\r\n// Encodes message using LSB method\r\nfunction encodeMessage(colors, message) {\r\n  let messageBits = getBitsFromNumber(message.length);\r\n  messageBits = messageBits.concat(getMessageBits(message));\r\n  let history = [];\r\n  let pos = 0;\r\n  while (pos < messageBits.length) {\r\n    let loc = getNextLocation(history, colors.length);\r\n    colors[loc] = setBit(colors[loc], 0, messageBits[pos]);\r\n    while ((loc + 1) % 4 !== 0) {\r\n      loc++;\r\n    }\r\n    colors[loc] = 255;\r\n    pos++;\r\n  }\r\n};\r\n\r\n// Decodes message from the image\r\nfunction decodeMessage(colors) {\r\n  let history = [];\r\n  let messageSize = getNumberFromBits(colors, history);\r\n  if ((messageSize + 1) * 16 > colors.length * 0.75) {\r\n    return '';\r\n  }\r\n  if (messageSize === 0) {\r\n    return '';\r\n  }\r\n  let message = [];\r\n  for (let i = 0; i < messageSize; i++) {\r\n    let code = getNumberFromBits(colors, history);\r\n    message.push(String.fromCharCode(code));\r\n  }\r\n  return message.join('');\r\n};\r\n\r\nfunction getBit(number, location) {\r\n  return ((number >> location) & 1);\r\n};\r\n\r\n// sets the bit in 'location' to 'bit' (either a 1 or 0)\r\nfunction setBit(number, location, bit) {\r\n  return (number & ~(1 << location)) | (bit << location);\r\n};\r\n\r\n// returns an array of 1s and 0s for a 2-byte number\r\nfunction getBitsFromNumber(number) {\r\n  let bits = [];\r\n  for (let i = 0; i < 16; i++) {\r\n    bits.push(getBit(number, i));\r\n  }\r\n  return bits;\r\n};\r\n\r\n// returns the next 2-byte number\r\nfunction getNumberFromBits(bytes, history) {\r\n  let number = 0,\r\n    pos = 0;\r\n  while (pos < 16) {\r\n    let loc = getNextLocation(history, bytes.length);\r\n    let bit = getBit(bytes[loc], 0);\r\n    number = setBit(number, pos, bit);\r\n    pos++;\r\n  }\r\n  return number;\r\n};\r\n\r\n// returns an array of 1s and 0s for the string 'message'\r\nfunction getMessageBits(message) {\r\n  let messageBits = [];\r\n  for (let i = 0; i < message.length; i++) {\r\n    let code = message.charCodeAt(i);\r\n    messageBits = messageBits.concat(getBitsFromNumber(code));\r\n  }\r\n  return messageBits;\r\n};\r\n\r\n// gets the next location to store a bit\r\nfunction getNextLocation(history, total) {\r\n  let loc = 0;\r\n  while (true) {\r\n    if (history.indexOf(loc) >= 0) {\r\n      loc++;\r\n    } else if ((loc + 1) % 4 === 0) {\r\n      loc++;\r\n    } else {\r\n      history.push(loc);\r\n      return loc;\r\n    }\r\n  }\r\n};\r\n\r\nexport { decode, encode, loadImage };","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { loadImage } from '../steganography';\r\n\r\n\r\nexport default function UploadButton() {\r\n  return (\r\n    <label htmlFor=\"upload-photo\">\r\n      <input\r\n        style={{ display: 'none' }}\r\n        id=\"upload-photo\"\r\n        name=\"upload-photo\"\r\n        type=\"file\"\r\n        onChange={loadImage}\r\n      />\r\n      <div>\r\n        <Button style={{margin: '1rem'}} variant=\"contained\" id=\"upload_button\" component=\"span\">\r\n          Upload Image\r\n        </Button>\r\n      </div>\r\n    </label>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport UploadButton from './UploadButton';\r\nimport { encode, decode } from '../steganography';\r\n\r\nexport default function App() {\r\n\r\n  const [option, setOption] = useState('home');\r\n\r\n  function handleClick(event) {\r\n\r\n    const { name } = event.currentTarget;\r\n    if (name === 'home') {\r\n      setOption('home');\r\n      document.getElementById('encoded-image').style.display = 'none';\r\n    } else if (name === 'encode') {\r\n      setOption('encode');\r\n    } else if (name === 'decode') {\r\n      setOption('decode');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"bg-img\"></div>\r\n    <div className='content'>\r\n      <h1 id=\"heading\">STEGANO<span id=\"word\"></span></h1>\r\n      {option === 'home' && <button style={{margin: '1rem'}} name='encode' onClick={handleClick} variant=\"contained\">Encode</button>}\r\n      {option === 'home' && <button style={{margin: '1rem'}} name='decode' onClick={handleClick} variant=\"contained\">Decode</button>}\r\n      {option === 'encode' && <input variant=\"outlined\" multiline type=\"text\" id=\"secret\" name=\"secret\" placeholder=\"Enter secret message\" />}\r\n      {option !== 'home' && <UploadButton />}\r\n      {option === 'encode' && <button style={{margin: '1rem'}} onClick={encode} variant=\"contained\">Encode</button>}\r\n      {option === 'decode' && <button style={{margin: '1rem'}} onClick={decode} variant=\"contained\">Decode</button>}\r\n      {option !== 'home' && <button style={{margin: '1rem'}} name='home' onClick={handleClick} variant=\"contained\">Return</button>}\r\n      <img id=\"encoded-image\" alt='encoded output'></img>\r\n      <canvas id=\"canvas\"></canvas>\r\n    </div>\r\n </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './style.css';\r\n\r\nReactDOM.render(<\r\n  App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}